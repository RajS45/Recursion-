Combination-I

class Solution{
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        backtrack(0, candidates, target, new ArrayList<>(), ans);
        return ans;
    }
    private void backtrack(int ind, int[] candidates, int target, List<Integer> temp, List<List<Integer>> ans) {
        if (target == 0){
            ans.add(new ArrayList<>(temp));
            return;
        }
        if (target < 0 || ind == candidates.length) {
            return;
        }
        temp.add(candidates[ind]);
        backtrack(ind, candidates, target - candidates[ind], temp, ans);
        temp.remove(temp.size() - 1); 
        backtrack(ind + 1, candidates, target, temp, ans);
    }
}
