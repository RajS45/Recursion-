Subset - I


import java.util.ArrayList;
import java.util.List;
class Solution {
    public List<Integer> subsetSums(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        func(0, 0, nums, ans);
        return ans;
    }
    private void func(int ind, int sum, int[] nums, List<Integer> ans) {
        if (ind == nums.length) {
            ans.add(sum);
            return;
        }
        func(ind + 1, sum + nums[ind], nums, ans);
        func(ind + 1, sum, nums, ans);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums = {1, 2, 3};
        List<Integer> result = sol.subsetSums(nums);
        
        System.out.println("Subset sums are: " + result);
    }
}


Subset - II 

class Solution {

private void func(int ind, List<Integer> arr, int[] nums, List<List<Integer>> ans) {
    if (ind == nums.length) {
        ans.add(new ArrayList<>(arr));
        return;
    }
    
    arr.add(nums[ind]);    
    func(ind + 1, arr, nums, ans);
    // Backtrack: remove the current element from the subset
    arr.remove(arr.size() - 1);
    
    // Skip duplicates and recur for the next unique element
    for (int j = ind + 1; j < nums.length; j++) {
        if (nums[j] != nums[ind]) {
            func(j, arr, nums, ans);
            return;
        }
    }    
    func(nums.length, arr, nums, ans);
}

public List<List<Integer>> subsetsWithDup(int[] nums) {
    List<List<Integer>> ans = new ArrayList<>();  // Resulting list of subsets
    List<Integer> arr = new ArrayList<>();        // Current subset
    Arrays.sort(nums);  // Sort the array to handle duplicates
    func(0, arr, nums, ans);  // Start recursion
    return ans;
}
};

